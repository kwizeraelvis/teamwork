import 'jest-extended';
import request from 'supertest';
import app from '../app';
import {setupDummyData, userOne, AuthToken1,AuthToken3} from './fixtures/TestData';
import {SetupDummyDatabase} from './fixtures/ArticleData';

beforeEach(setupDummyData);
beforeEach(SetupDummyDatabase);

describe('Article routes tests', () => {
it('Should create a new article for a valid user ', async () => {
    await request(app).post('/articles')
        .set('Authorization', AuthToken1)
        .send({
            title: 'Dummy title',
            content: 'This is dummy data generated by jest'
        }).expect(200);
});

it('Should not create article for invalid user', async () => {
    await request(app).post('/articles')
    .set('Authorization', AuthToken3)
    .send({
        title: 'Dummy Title',
        content: 'Dummy content'
    }).expect(404)
});

it('Should not create task with no title', async () => {
    await request(app).post('/articles')
    .set('Authorization', AuthToken3)
    .send({
        content: 'Dummy Content'
    }).expect(422)
});

it('Should not create task with no content/body', async () => {
    await request(app).post('/articles')
    .set('Authorization',AuthToken1)
    .send({
        content:'Dummy Data'
    }).expect(422)
});

it('Should show all articles in a sorted manner', async () => {
    await request(app)
        .get('/feeds')
        .set('Authorization', AuthToken1)
        .send()
        .expect(200)
});

it('Should not show articles if user is not logged in', async () => {
    await request(app)
        .get('/feeds')
        .send()
        .expect(401)
});

it('should return articles for the current user', async() => {
    await request(app)
        .get('/feed/me')
        .set('Authorization', AuthToken1)
        .send()
        .expect(200)
});

it('should not return articles for unregistered user', async() => {
    await request(app)
        .get('/feed/me')
        .send()
        .expect(401)
});
it('should not show articles for user with no articles', async() => {
    await request(app)
        .get('/feed/me')
        .set('Authorization', AuthToken3)
        .expect(404)
})
});